#!/bin/bash
#
# Tile up to three windows on a display
#
#   tile       :: tile the cursor's monitor with default separator values
#   tile -v50  :: tile the cursor's monitor with default h-sep and v-sep at 50%
#   tile -h50  :: tile the cursor's monitor with default v-sep and h-sep at 50%
#   tile -2    :: tile monitor 2 with default separator values
#
#   Custom Dependencies:  desk, vis, tiling
#   Package Dependencies:
#
################################################################################

#-------------------------------------------------------------------------------
# Utility Functions


source ~/lib/bash/tiling
source ~/lib/bash/utils

function usage()
{

    a=$(printf "On line: ${BASH_LINENO[0]}")
    b=$(printf "\n\nUsage: \n  tile [-h][-v vertsep][-d desktop][-b border]")
    c=$(printf " <win1> <win2> ... <winN>")
    
    utils.errorf "%s%s%s" "$a" "$b" "$c"
    
}


#-------------------------------------------------------------------------------
# Set Default Values


desktop=$(tiling.getCursorDesktop)
borderWidth=12
vertSepPos=60
horizSepPos=48


#-------------------------------------------------------------------------------
# Parse Inputs


while getopts ":123v:h:d:b:" opt; do
    case ${opt} in
        [1-3] )
            desktop=$opt
            ;;
        v )
            vertSepPos=$OPTARG
            if (( (20 > vertSepPos) || (80 < vertSepPos) )); then
                utils.errorf "\n\tUnsupported width (position ∈ [20, 80])\n"
            fi
            ;;
        h )
            horizSepPos=$OPTARG
            if (( (30 > horizSepPos) || (70 < horizSepPos) )); then
                utils.errorf "\n\tUnsupported height (position ∈ [30, 70])\n"
            fi
            ;;
        d )
            desktop=$OPTARG
            ;;
        b )
            borderWidth=$OPTARG
	    if (( (8 > borderWidth) || (60 < borderWidth) )); then
		utils.errorf "\n\tUnsupported border width (border ∈ [8, 60])\n"
	    fi
	    ;;
        \?)
            usage
            ;;
    esac
done

shift $(($OPTIND - 1))
numWindows=$#

if (( numWindows == 0 )); then
    autoTile=1
fi


#-------------------------------------------------------------------------------
# Get Window IDs


if (( autoTile )); then
    WIDList=$(vis -d$desktop)
    numWindows=$(wc -w <<< "$WIDList")

    for wID in $WIDList; do
        sizeOfwID="$(tiling.getWindowSize $wID)"
        wSize+=($sizeOfwID)
        wMap["$sizeOfwID"]=$wID
    done

    sortedwSize=$(sort -nr <<< "$(sed -r 's# #\n#g' <<< ${wSize[@]})" )

    WID1=${wMap[$(awk '{print $1}' <<< ${sortedwSize[@]})]}
    WID2=${wMap[$(awk '{print $2}' <<< ${sortedwSize[@]})]}
    WID3=${wMap[$(awk '{print $3}' <<< ${sortedwSize[@]})]}

else
    WID1=$(pnw $1)
    WID2=$(pnw $2)
    WID3=$(pnw $3)
fi

for wIdx in $(seq 3 $numWindows); do
    xdotool windowminimize ${WIDList[$wIDx]}
done


#-------------------------------------------------------------------------------
# Get title bar width


for wID in $WID1 $WID2 $WID3; do
    yTitle+=($(xprop -id $wID | awk '/FRAME/ {print substr($5,1,length($5)-1)}'))
done


#-------------------------------------------------------------------------------
# Determine Monitor Count and Resolution


read -r xLeft yTop <<< $(wmctrl -lG | grep -m1 "unity-launcher" | awk '{print $5, $4}')

if [[ $(desk -n) == 1 ]]; then #Single Monitor
    desktop=1
fi

case $desktop in
    1)
        read -r xDispOffset yDispOffset <<< $(desk -d1 -o)
        read -r xRes yRes <<< $(desk -d1 -r)
        ;;
    2)
        read -r xDispOffset yDispOffset <<< $(desk -d2 -o)
        read -r xRes yRes <<< $(desk -d2 -r)
        ;;
    3)
        read -r xDispOffset yDispOffset <<< $(desk -d3 -o)
        read -r xRes yRes <<< $(desk -d3 -r)
        ;;
    *)
        utils.errorf "\n\tInvalid monitor selection (%d).\n" "$desktop"
        ;;
esac


#-------------------------------------------------------------------------------
# Set boundaries and move windows


xVertSep=$(( (vertSepPos*(xRes-xLeft)/100) ))
yHorizSep=$(( (horizSepPos*(yRes-yTop)/100) ))

case $numWindows in
    1)
        x1=$(( xDispOffset+xLeft+borderWidth ))
        y1=$(( yDispOffset+yTop+borderWidth ))
        w1=$(( xRes-xLeft-(2*borderWidth) ))
        h1=$(( yRes-yTop-yTitle[0]-(2*borderWidth) ))

        move $x1 $y1 $w1 $h1 $WID1
        ;;
    2)
        x1=$(( xDispOffset+xLeft+borderWidth ))
        y1=$(( yDispOffset+yTop+borderWidth ))
        w1=$(( xVertSep-borderWidth ))
        h1=$(( yRes-yTop-yTitle[0]-(2*borderWidth) ))

        x2=$(( x1+w1+borderWidth ))
        y2=$(( y1 ))
        w2=$(( xRes-xLeft-xVertSep-2*borderWidth ))
        h2=$(( yRes-yTop-yTitle[1]-(2*borderWidth) ))

        move $x1 $y1 $w1 $h1 $WID1
        move $x2 $y2 $w2 $h2 $WID2
        ;;
    *)
        x1=$(( xDispOffset+xLeft+borderWidth ))
        y1=$(( yDispOffset+yTop+borderWidth ))
        w1=$(( xVertSep-borderWidth ))
        h1=$(( yRes-yTop-yTitle[0]-(2*borderWidth) ))

        x2=$(( x1+w1+borderWidth ))
        y2=$(( y1 ))
        w2=$(( xRes-xLeft-xVertSep-2*borderWidth ))
        h2=$(( yHorizSep-yTitle[1]-2*borderWidth ))

        x3=$(( x2 ))
        y3=$(( y2+h2+yTitle[1]+borderWidth ))
        w3=$(( w2 ))
        h3=$(( yRes-yHorizSep-yTitle[2]-2*borderWidth ))

        move $x1 $y1 $w1 $h1 $WID1
        move $x2 $y2 $w2 $h2 $WID2
        move $x3 $y3 $w3 $h3 $WID3

        utils.errorf "\n\tInvalid number of windows specified (%d)\n" "$numWindows"
        ;;
esac
