#!/bin/bash

#==============================================================================#
#  tile - tile up to three windows on a display 
#
#  Usage:
#
#    tile       :: tile the cursor's monitor with default separator values
#    tile -v50  :: tile the cursor's monitor with h-sep=default & v-sep=50%
#    tile -h50  :: tile the cursor's monitor with v-sep=default & h-sep=50%
#    tile -2    :: tile monitor 2 with default separator values
#
#    Custom Dependencies:  desk, vis, tiling
#    Package Dependencies: xdotool, wmctrl
#

#-------------------------------------------------------------------------------
# Utility Functions


source ~/lib/bash/tiling
source ~/lib/bash/utils

function usage()
{

    a=$(printf "On line: %s" "${BASH_LINENO[0]}")
    b=$(printf "\n\nUsage: \n  tile [-h][-v vertsep][-d desktop][-b gap]")
    c=$(printf " <win1> <win2> ... <winN>")

    utils.errorf "%s%s%s" "$a" "$b" "$c"

}


#-------------------------------------------------------------------------------
# Set Default Values


desktop=$(tiling.getCursorDesktop)
gap=30
vSepPos=60
hSepPos=48


#-------------------------------------------------------------------------------
# Parse Inputs


while getopts ":123v:h:d:b:" opt; do
    case ${opt} in
        [1-3] )
            desktop=$opt
            ;;
        v )
            vSepPos=$OPTARG
            if (( (20 > vSepPos) || (80 < vSepPos) )); then
                utils.errorf "\n\tUnsupported width (v ∈ [20,80])\n"
            fi
            ;;
        h )
            hSepPos=$OPTARG
            if (( (30 > hSepPos) || (70 < hSepPos) )); then
                utils.errorf "\n\tUnsupported height (h ∈ [30,70])\n"
            fi
            ;;
        d )
            desktop=$OPTARG
            ;;
        b )
            gap=$OPTARG
	    if (( (8 > gap) || (60 < gap) )); then
		utils.errorf "\n\tUnsupported gap width (gap ∈ [8,60])\n"
	    fi
	    ;;
        \?)
            usage
            ;;
    esac
done

shift $((OPTIND - 1))
numWindows=$#


#-------------------------------------------------------------------------------
# Get Window IDs


WIDList=$(vis -d"$desktop")
numWindows=$(wc -w <<< "$WIDList")

for WID in $WIDList; do
    sizeOfWID=$(tiling.getWindowSize "$WID")
    wSize+=($sizeOfWID)
    wMap[$sizeOfWID]=$WID
done

sortedwSize=($(sort -nr <<< "$(sed -r 's| |\n|g' <<< ${wSize[@]})" ))

for idx in {0..2}; do
    WIDs+=(${wMap[${sortedwSize[$idx]}]})
done


#-------------------------------------------------------------------------------
# Get title bar width


for W in "${WIDs[@]}"; do
    yTitle+=($(xprop -id "$W" | awk '/FRAME/ {print substr($5,1,length($5)-1)}'))
done


#-------------------------------------------------------------------------------
# Determine Monitor Count and Resolution


# Get xLeft and yTop
if [[ $XDG_CURRENT_DESKTOP =~ Unity ]]; then
    read -r xLeft yTop <<< $(wmctrl -lG | grep -m1 "unity-launcher" | awk '{print $5, $4}')
elif [[ $XDG_CURRENT_DESKTOP =~ XFCE ]]; then
    xLeft=$(wmctrl -lG | egrep -v "0 +0" | awk '/xfce4-panel/ {print $5}')
    yTop=$(wmctrl -lG | egrep "0 +0" | awk '/xfce4-panel/ {print $6}')
else
    utils.nerrorf "Not yet implemented."
fi

read -r xOff yOff <<< $(desk -d"$desktop" -o)
read -r xRes yRes <<< $(desk -d"$desktop" -r)

xLeft=${xLeft:-0}
yTop=${yTop:-0}

if [[ $(desk -n) == 1 ]]; then #Single Monitor
    desktop=1
fi


#-------------------------------------------------------------------------------
# Set boundaries and move windows


vSep=$(( (vSepPos*(xRes-xLeft)/100) ))
ySep=$(( (hSepPos*(yRes-yTop)/100) ))

case $numWindows in
    1)
        x1=$(( xOff + xLeft + gap ))
        y1=$(( yOff + yTop + gap ))
        w1=$(( xRes - xLeft - 2*gap ))
        h1=$(( yRes - yTop - yTitle[0] - 2*gap ))

        move $x1 $y1 $w1 $h1 "${WIDs[0]}"
        ;;
    2)
        x1=$(( xOff + xLeft + gap ))
        y1=$(( yOff + yTop + gap ))
        w1=$(( vSep - gap ))
        h1=$(( yRes - yTop - yTitle[0] - 2*gap ))

        x2=$(( x1 + w1 + gap ))
        y2=$(( y1 ))
        w2=$(( xRes - xLeft - vSep - 2*gap ))
        h2=$(( yRes - yTop - yTitle[1] - 2*gap ))

        move $x1 $y1 $w1 $h1 "${WIDs[0]}"
        move $x2 $y2 $w2 $h2 "${WIDs[1]}"
        ;;
    *)
        x1=$(( xOff + xLeft + gap ))
        y1=$(( yOff + yTop + gap ))
        w1=$(( vSep - gap ))
        h1=$(( yRes - yTop - yTitle[0] - 2*gap ))

        x2=$(( x1 + w1 + gap ))
        y2=$(( y1 ))
        w2=$(( xRes - xLeft - vSep - 2*gap ))
        h2=$(( ySep - yTitle[1] - 2*gap ))

        x3=$(( x2 ))
        y3=$(( y2 + h2 + yTitle[1] + gap ))
        w3=$(( w2 ))
        h3=$(( yRes - ySep - yTitle[2] - 2*gap ))

        move $x1 $y1 $w1 $h1 "${WIDs[0]}"
        move $x2 $y2 $w2 $h2 "${WIDs[1]}"
        move $x3 $y3 $w3 $h3 "${WIDs[2]}"

	if [[ $numWindows -gt 3 ]]; then
	    largest="${WIDs[*]}"
	    for window in $(vis -d$desktop); do
		if [[ ! ${largest[@]} =~ $window ]]; then
		    xdotool windowminimize "$window"
		fi
	    done

	    utils.nerrorf "Too many windows on display %d (%d)" "$desktop" "$numWindows"
	fi
	;;
esac

