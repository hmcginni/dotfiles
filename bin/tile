#!/bin/bash
#
# Tile up to three windows on a display
#
#   tile       :: tile the cursor's current monitor with default values separator values
#   tile -v50  :: tile the cursor's current monitor with default h-sep and v-sep at 50%
#   tile -h50  :: tile the cursor's current monitor with default v-sep and h-sep at 50%
#   tile -2    :: tile monitor 2 with default separator values
#
#   Custom Dependencies:  desk, vis, tiling_functions
#   Package Dependencies:
#
################################################################################

#-------------------------------------------------------------------------------
# Utility Functions


source ~/lib/bash/tiling_functions

function usage()
{
    printf "\nOn line: ${BASH_LINENO[0]}\n"
    printf "Usage: \n  tile [-h][-v vertsep][-d desktop][-b borderWidth] "
    printf "<win1> <win2> ... <winN>\n"
}


#-------------------------------------------------------------------------------
# Set Default Values


desktop=$(getCursorDesktop)
borderWidth=15
vertSepPos=60
horizSepPos=45


#-------------------------------------------------------------------------------
# Parse Inputs


while getopts ":123v:h:d:b:" opt; do
    case ${opt} in
	[1-3] )
	    desktop=$opt
	    ;;
	v )
	    vertSepPos=$OPTARG
	    if (( (20 > vertSepPos) || (80 < vertSepPos) )); then
		echo "Unsupported width"
		exit 1
	    fi
	    ;;
	h )
	    horizSepPos=$OPTARG
	    if (( (30 > horizSepPos) || (70 < horizSepPos) )); then
		echo "Unsupported height"
		exit 1
	    fi
	    ;;
	d )
	    desktop=$OPTARG
	    ;;
	b )
	    borderWidth=$OPTARG
	    ;;
	\?)
	    usage
	    exit 1
	    ;;
    esac
done

shift $(($OPTIND - 1))
numWindows=$#

if (( numWindows == 0 )); then
    autoTile=1
fi


#-------------------------------------------------------------------------------
# Get Window IDs


if (( autoTile )); then
    WIDList=$(vis -d$desktop)
    numWindows=$(wc -w <<< $WIDList)

    for wID in $WIDList; do
	sizeOfwID="$(getWindowSize $wID)"
	wSize+=($sizeOfwID)
	wMap["$sizeOfwID"]=$wID
    done

    sortedwSize=$(sort -nr <<< "$(sed -r 's# #\n#g' <<< ${wSize[@]})" )

    for wID in $sortedwSize; do
	WID1=${wMap[$(awk '{print $1}' <<< $sortedwSize)]}
	WID2=${wMap[$(awk '{print $2}' <<< $sortedwSize)]}
	WID3=${wMap[$(awk '{print $3}' <<< $sortedwSize)]}
    done

else
    WID1=$(pnw $1)
    WID2=$(pnw $2)
    WID3=$(pnw $3)
fi


#-------------------------------------------------------------------------------
# Get title bar width


yTitle=$(xprop -id $WID1 | awk '/FRAME/ {print substr($5,1,length($5)-1)}')


#-------------------------------------------------------------------------------
# Determine Monitor Count and Resolution


read -r xLeft yTop <<< $(wmctrl -lG | grep -m1 "unity-launcher" | awk '{print $5, $4}')

if [[ $(desk -n) == 1 ]]; then #Single Monitor
    desktop=1
fi

case $desktop in
    1)
	read -r xDispOffset yDispOffset <<< $(desk -d1 -o)
	read -r xRes yRes <<< $(desk -d1 -r)
	;;
    2)
	read -r xDispOffset yDispOffset <<< $(desk -d2 -o)
	read -r xRes yRes <<< $(desk -d2 -r)
	;;
    3)
	read -r xDispOffset yDispOffset <<< $(desk -d3 -o)
	read -r xRes yRes <<< $(desk -d3 -r)
	;;
    *)
	echo "Invalid display selection."
	exit 1
	;;
esac


#-------------------------------------------------------------------------------
# Set boundaries and move windows


xVertSep=$(( (vertSepPos*(xRes-xLeft)/100) ))
yHorizSep=$(( (horizSepPos*(yRes-yTop)/100) ))

case $numWindows in
    1)
	x1=$(( xDispOffset+xLeft+borderWidth ))
	y1=$(( yDispOffset+yTop+borderWidth ))
	w1=$(( xRes-xLeft-(2*borderWidth) ))
	h1=$(( yRes-yTop-yTitle-(2*borderWidth) ))

	move $x1 $y1 $w1 $h1 $WID1
	;;
    2)
	x1=$(( xDispOffset+xLeft+borderWidth ))
	y1=$(( yDispOffset+yTop+borderWidth ))
	w1=$(( xVertSep-borderWidth ))
	h1=$(( yRes-yTop-yTitle-(2*borderWidth) ))

	x2=$(( x1+w1+borderWidth ))
	y2=$(( y1 ))
	w2=$(( xRes-xLeft-xVertSep-2*borderWidth ))
	h2=$(( h1 ))

	move $x1 $y1 $w1 $h1 $WID1
	move $x2 $y2 $w2 $h2 $WID2
	;;
    3)
	x1=$(( xDispOffset+xLeft+borderWidth ))
	y1=$(( yDispOffset+yTop+borderWidth ))
	w1=$(( xVertSep-borderWidth ))
	h1=$(( yRes-yTop-yTitle-(2*borderWidth) ))

	x2=$(( x1+w1+borderWidth ))
	y2=$(( y1 ))
	w2=$(( xRes-xLeft-xVertSep-2*borderWidth ))
	h2=$(( yHorizSep-yTitle-2*borderWidth ))

	x3=$(( x2 ))
	y3=$(( y2+h2+yTitle+borderWidth ))
	w3=$(( w2 ))
	h3=$(( yRes-yHorizSep-yTitle-2*borderWidth ))

	move $x1 $y1 $w1 $h1 $WID1
	move $x2 $y2 $w2 $h2 $WID2
	move $x3 $y3 $w3 $h3 $WID3
	;;
    *)
	echo "Invalid number of windows specified"
	usage
	exit 1
	;;
esac
